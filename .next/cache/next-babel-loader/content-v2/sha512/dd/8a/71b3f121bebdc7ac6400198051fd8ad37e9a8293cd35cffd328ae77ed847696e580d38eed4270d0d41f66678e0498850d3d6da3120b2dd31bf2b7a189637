{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _classCallCheck from \"/home/meddou/projects/perso/meddou.com/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/meddou/projects/perso/meddou.com/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/home/meddou/projects/perso/meddou.com/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/home/meddou/projects/perso/meddou.com/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/home/meddou/projects/perso/meddou.com/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/meddou/projects/perso/meddou.com/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nvar _jsxFileName = \"/home/meddou/projects/perso/meddou.com/src/component/Scroller.jsx\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nvar Scroller = /*#__PURE__*/function (_Component) {\n  _inherits(Scroller, _Component);\n\n  var _super = _createSuper(Scroller);\n\n  function Scroller(props) {\n    var _this;\n\n    _classCallCheck(this, Scroller);\n\n    _this = _super.call(this, props);\n    _this.containerRef = /*#__PURE__*/React.createRef();\n    _this.sectionRefs = [];\n    _this.lastScrollTop = 0;\n    _this.isScrolling = false;\n    _this.canScroll = true;\n    _this.scrollTimeout = undefined;\n    _this.scrollTimer = undefined;\n    _this.canScrollTimeout = undefined;\n    _this.sections = React.Children.map(props.children, function (child) {\n      var ref = /*#__PURE__*/React.createRef();\n\n      _this.sectionRefs.push(ref);\n\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: ref,\n        children: child\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 14\n      }, _assertThisInitialized(_this));\n    });\n    _this.index = props.index || 0;\n    _this.nextIndex = props.index || 0;\n    _this.scrollTimerFx = _this.scrollTimerFx.bind(_assertThisInitialized(_this));\n    console.log('IN CTOR');\n    return _this;\n  }\n\n  _createClass(Scroller, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.container = window;\n      console.log(this.index);\n      this.scrollToElement(this.sectionRefs[this.index].current, this.index, false);\n      this.bindListener();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      var index = this.props.index;\n      console.log(index, this.nextIndex);\n\n      if (this.nextIndex !== index) {\n        // this.index = index\n        this.isScrolling = true;\n        this.scrollToElement(this.sectionRefs[this.index].current, index);\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.unbindListener();\n      window.clearTimeout(this.scrollTimeout);\n      window.clearTimeout(this.canScrollTimeout);\n    }\n  }, {\n    key: \"onScroll\",\n    value: function onScroll(e) {\n      var scrollDirectionCoeff = this.getScrollDirection() === true ? 1 : -1;\n\n      if (this.index + scrollDirectionCoeff < this.sectionRefs.length && this.index + scrollDirectionCoeff >= 0 && e.timeStamp >= 1000) {\n        var nextIndex = this.index + scrollDirectionCoeff;\n        var nextElement = this.sectionRefs[nextIndex].current.getBoundingClientRect();\n\n        if (scrollDirectionCoeff === 1 || scrollDirectionCoeff === -1 && nextElement.top + nextElement.height >= 0) {\n          e.preventDefault();\n          e.stopPropagation();\n          this.nextIndex = nextIndex;\n          this.notifyOnScroll(nextIndex);\n          this.scrollToElement(this.sectionRefs[nextIndex].current, nextIndex);\n        }\n      }\n    }\n  }, {\n    key: \"getContainerBounding\",\n    value: function getContainerBounding() {\n      return this.container.getBoundingClientRect();\n    }\n  }, {\n    key: \"getContainerScrollTop\",\n    value: function getContainerScrollTop() {\n      return this.container.scrollTop || window.pageYOffset || document.documentElement.scrollTop;\n    }\n  }, {\n    key: \"getScrollDirection\",\n    value: function getScrollDirection() {\n      var st = this.getContainerScrollTop();\n      var ret = st > this.lastScrollTop;\n      this.lastScrollTop = st <= 0 ? 0 : st;\n      return ret;\n    }\n  }, {\n    key: \"scrollToElement\",\n    value: function scrollToElement(element, index) {\n      var isSmooth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      var top = this.getContainerScrollTop();\n      var elementRect = element.getBoundingClientRect(); // this.isScrolling = true\n\n      this.container.scrollTo({\n        behavior: isSmooth ? 'smooth' : 'instant',\n        left: 0,\n        top: top + elementRect.top\n      });\n      this.index = index;\n      this.nextIndex = index;\n      window.oldIndex = index;\n    }\n  }, {\n    key: \"notifyOnScroll\",\n    value: function notifyOnScroll(index) {\n      var onScroll = this.props.onScroll;\n\n      if (onScroll) {\n        onScroll(index);\n      }\n    }\n  }, {\n    key: \"scrollTimerFx\",\n    value: function scrollTimerFx(e) {\n      var _this2 = this;\n\n      // console.log('IN SCROLL')\n      if (this.canScroll) {\n        /**\r\n         * @LINK https://stackoverflow.com/questions/4620906/how-do-i-know-when-ive-stopped-scrolling\r\n         */\n        if (this.scrollTimer !== null) {\n          clearTimeout(this.scrollTimer);\n        }\n\n        this.scrollTimer = setTimeout(function () {\n          if (_this2.isScrolling) {\n            // console.log('SCROLL END');\n            _this2.canScroll = false;\n\n            _this2.getScrollDirection();\n\n            _this2.isScrolling = false;\n            _this2.canScrollTimeout = window.setTimeout(function () {\n              _this2.canScroll = true;\n            }, 50);\n          } else {\n            // console.log('SCROLL START');\n            _this2.isScrolling = true;\n\n            _this2.onScroll(e);\n          }\n        }, 150);\n      } else {\n        this.getScrollDirection();\n      }\n    }\n  }, {\n    key: \"bindListener\",\n    value: function bindListener() {\n      this.container.addEventListener('scroll', this.scrollTimerFx);\n    }\n  }, {\n    key: \"unbindListener\",\n    value: function unbindListener() {\n      this.container.removeEventListener('scroll', this.scrollTimerFx);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var className = this.props.className;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: this.containerRef,\n        className: ['scroller-main-container', className || ''].join(' '),\n        children: this.sections.map(function (child) {\n          return child;\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 7\n      }, this);\n    }\n  }]);\n\n  return Scroller;\n}(Component);\n\nScroller.propTypes = {\n  index: PropTypes.number.isRequired,\n  children: PropTypes.arrayOf(PropTypes.node.isRequired).isRequired,\n  onScroll: PropTypes.func.isRequired\n};\nexport default Scroller;","map":{"version":3,"sources":["/home/meddou/projects/perso/meddou.com/src/component/Scroller.jsx"],"names":["React","Component","PropTypes","Scroller","props","containerRef","createRef","sectionRefs","lastScrollTop","isScrolling","canScroll","scrollTimeout","undefined","scrollTimer","canScrollTimeout","sections","Children","map","children","child","ref","push","index","nextIndex","scrollTimerFx","bind","console","log","container","window","scrollToElement","current","bindListener","unbindListener","clearTimeout","e","scrollDirectionCoeff","getScrollDirection","length","timeStamp","nextElement","getBoundingClientRect","top","height","preventDefault","stopPropagation","notifyOnScroll","scrollTop","pageYOffset","document","documentElement","st","getContainerScrollTop","ret","element","isSmooth","elementRect","scrollTo","behavior","left","oldIndex","onScroll","setTimeout","addEventListener","removeEventListener","className","join","propTypes","number","isRequired","arrayOf","node","func"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nclass Scroller extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.containerRef = React.createRef()\r\n    this.sectionRefs = []\r\n    this.lastScrollTop = 0\r\n    this.isScrolling = false\r\n    this.canScroll = true\r\n\r\n    this.scrollTimeout = undefined\r\n    this.scrollTimer = undefined\r\n    this.canScrollTimeout = undefined\r\n\r\n    this.sections = React.Children.map(props.children, (child) => {\r\n      const ref = React.createRef()\r\n\r\n      this.sectionRefs.push(ref)\r\n      return <div ref={ref}>{child}</div>\r\n    })\r\n\r\n    this.index = props.index || 0\r\n\r\n    this.nextIndex = props.index || 0\r\n\r\n    this.scrollTimerFx = this.scrollTimerFx.bind(this)\r\n    console.log('IN CTOR')\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.container = window\r\n\r\n    console.log(this.index)\r\n    this.scrollToElement(this.sectionRefs[this.index].current, this.index, false)\r\n    this.bindListener()\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    const { index } = this.props\r\n\r\n    console.log(index, this.nextIndex)\r\n    if (this.nextIndex !== index) {\r\n      // this.index = index\r\n      this.isScrolling = true\r\n      this.scrollToElement(this.sectionRefs[this.index].current, index)\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.unbindListener()\r\n    window.clearTimeout(this.scrollTimeout)\r\n    window.clearTimeout(this.canScrollTimeout)\r\n  }\r\n\r\n  onScroll(e) {\r\n    const scrollDirectionCoeff = this.getScrollDirection() === true ? 1 : -1\r\n\r\n    if ((this.index + scrollDirectionCoeff) < this.sectionRefs.length\r\n      && (this.index + scrollDirectionCoeff) >= 0 && e.timeStamp >= 1000) {\r\n      const nextIndex = this.index + scrollDirectionCoeff\r\n\r\n      const nextElement = this.sectionRefs[nextIndex].current.getBoundingClientRect()\r\n\r\n      if ((scrollDirectionCoeff === 1)\r\n      || (scrollDirectionCoeff === -1 && nextElement.top + nextElement.height >= 0)) {\r\n        e.preventDefault()\r\n        e.stopPropagation()\r\n        this.nextIndex = nextIndex\r\n        this.notifyOnScroll(nextIndex)\r\n        this.scrollToElement(this.sectionRefs[nextIndex].current, nextIndex)\r\n      }\r\n    }\r\n  }\r\n\r\n  getContainerBounding() {\r\n    return this.container.getBoundingClientRect()\r\n  }\r\n\r\n  getContainerScrollTop() {\r\n    return this.container.scrollTop || window.pageYOffset || document.documentElement.scrollTop\r\n  }\r\n\r\n  getScrollDirection() {\r\n    const st = this.getContainerScrollTop()\r\n    const ret = st > this.lastScrollTop\r\n\r\n    this.lastScrollTop = st <= 0 ? 0 : st\r\n    return ret\r\n  }\r\n\r\n  scrollToElement(element, index, isSmooth = true) {\r\n    const top = this.getContainerScrollTop()\r\n    const elementRect = element.getBoundingClientRect()\r\n\r\n    // this.isScrolling = true\r\n    this.container.scrollTo({\r\n      behavior: isSmooth ? 'smooth' : 'instant',\r\n      left: 0,\r\n      top: top + elementRect.top,\r\n    })\r\n\r\n    this.index = index\r\n    this.nextIndex = index\r\n    window.oldIndex = index\r\n  }\r\n\r\n  notifyOnScroll(index) {\r\n    const { onScroll } = this.props\r\n\r\n    if (onScroll) {\r\n      onScroll(index)\r\n    }\r\n  }\r\n\r\n  scrollTimerFx(e) {\r\n    // console.log('IN SCROLL')\r\n    if (this.canScroll) {\r\n      /**\r\n       * @LINK https://stackoverflow.com/questions/4620906/how-do-i-know-when-ive-stopped-scrolling\r\n       */\r\n      if (this.scrollTimer !== null) {\r\n        clearTimeout(this.scrollTimer);\r\n      }\r\n      this.scrollTimer = setTimeout(() => {\r\n        if (this.isScrolling) {\r\n          // console.log('SCROLL END');\r\n          this.canScroll = false\r\n          this.getScrollDirection()\r\n          this.isScrolling = false\r\n          this.canScrollTimeout = window.setTimeout(() => {\r\n            this.canScroll = true\r\n          }, 50)\r\n        } else {\r\n          // console.log('SCROLL START');\r\n          this.isScrolling = true\r\n          this.onScroll(e)\r\n        }\r\n      }, 150);\r\n    } else {\r\n      this.getScrollDirection()\r\n    }\r\n  }\r\n\r\n  bindListener() {\r\n    this.container.addEventListener('scroll', this.scrollTimerFx)\r\n  }\r\n\r\n  unbindListener() {\r\n    this.container.removeEventListener('scroll', this.scrollTimerFx)\r\n  }\r\n\r\n  render() {\r\n    const { className } = this.props\r\n\r\n    return (\r\n      <div ref={this.containerRef} className={['scroller-main-container', className || ''].join(' ')}>\r\n        { this.sections.map((child) => child) }\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nScroller.propTypes = {\r\n  index: PropTypes.number.isRequired,\r\n  children: PropTypes.arrayOf(PropTypes.node.isRequired).isRequired,\r\n  onScroll: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default Scroller\r\n"]},"metadata":{},"sourceType":"module"}