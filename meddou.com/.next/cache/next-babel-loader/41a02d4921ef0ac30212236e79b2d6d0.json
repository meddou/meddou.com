{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Users/Mehdi/projects/perso/meddou.com/meddou.com/pages/Project.jsx\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { withRouter, Link, Redirect } from 'react-router-dom';\nimport Slider from 'react-slick';\nimport moment from 'moment';\nimport 'moment/locale/fr';\nimport BasicPage from './BasicPage';\nimport Row from '../layout/row/Row';\nimport Item from '../layout/item/Item';\nimport Project from '../component/project/Project';\nimport ProjectOverlay from '../component/project/ProjectOverlay';\nimport Skill from '../component/skill/Skill';\nimport ScrollableRow from '../component/scrollable-row/ScrollableRow';\nimport Title from '../component/title/Title';\nimport Description from '../component/description/Description';\nimport RectScroller from '../component/rect-scroller/RectScroller';\nimport SkillService from '../services/Skill';\nimport ProjectService from '../services/Project'; // import './Project.css'\n// import './BasicPage.css'\n\nimport Zoomable from '../component/zoomable/Zoomable';\nimport './slick.min.css';\n\nclass ProjectPage extends BasicPage {\n  constructor(props) {\n    super(props);\n    const name = props.match.params.name;\n    this.timeoutId = undefined;\n    this.sliderRef = React.createRef();\n    this.container = window;\n    this.state = {\n      transitionVisible: !!window._projectListToProjectTrasition,\n      project: ProjectService.getFromName(name),\n      activeSlide: 0\n    };\n    this.goToWork = this.goToWork.bind(this);\n    this.onSwipe = this.onSwipe.bind(this);\n  }\n\n  componentDidMount() {\n    this.timeoutId = setTimeout(() => {\n      this.timeoutId = undefined;\n      this.setState({\n        transitionVisible: false\n      });\n    }, 500); // if (!window.document.documentMode) {\n\n    this.container.scroll({\n      top: 0,\n      left: 0,\n      behavior: 'instant'\n    }); // }\n  }\n\n  componentWillUnmount() {\n    if (this.timeoutId) {\n      clearTimeout(this.timeoutId);\n    } // if (!window.document.documentMode) {\n\n\n    this.container.scroll({\n      top: 0,\n      left: 0,\n      behavior: 'instant'\n    }); // }\n\n    window._projectListToProjectTrasition = undefined;\n  }\n\n  goToWork(e) {\n    e.preventDefault();\n    this.props.history.push(\"/work\");\n  }\n\n  setActiveSlide(slide, e) {\n    e.preventDefault();\n\n    if (this.state.activeSlide !== slide) {\n      this.setState({\n        activeSlide: slide\n      });\n      this.sliderRef.current.slickGoTo(slide);\n    }\n  }\n\n  onSwipe(direction) {\n    this.setState({\n      activeSlide: direction === 'left' ? 1 : 0\n    });\n  }\n\n  getCloseButton() {\n    return __jsx(\"div\", {\n      className: \"project-close-button-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 7\n      }\n    }, __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }\n    }, \"x\"));\n  }\n\n  renderContent() {\n    const tabs = [{\n      test: this.state.project.description_project || '',\n      name: 'Le projet',\n      content: this.state.project.description_project || ''\n    }, {\n      test: this.state.project.description_mission,\n      name: 'La mission',\n      content: this.state.project.description_mission\n    }, {\n      test: this.state.project.start,\n      name: 'La durÃ©e',\n      content: moment(this.state.project.start).locale('fr').format('LL') + ' - ' + (this.state.project.end ? moment(this.state.project.end).locale('fr').format('LL') : 'Actuel')\n    }].filter(t => t.test);\n    return __jsx(\"div\", {\n      id: \"project-page-super-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 7\n      }\n    }, __jsx(\"div\", {\n      className: \"project-page-background\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }\n    }), __jsx(\"div\", {\n      id: \"project-page-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }\n    }, this.state.project ? __jsx(\"div\", {\n      className: \"project-info-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 15\n      }\n    }, __jsx(\"div\", {\n      className: \"project-description-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 17\n      }\n    }, __jsx(Row, {\n      className: \"project-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 19\n      }\n    }, __jsx(\"div\", {\n      style: {\n        display: 'inline-block',\n        position: 'relative'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 21\n      }\n    }, __jsx(Project, {\n      backgroundColor: this.state.project.backgroundColor,\n      backgroundImage: this.state.project.backgroundImage,\n      name: this.state.project.name,\n      logo: this.state.project.logo,\n      isHoverable: false,\n      fullSize: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 23\n      }\n    }), __jsx(\"button\", {\n      type: \"submit\",\n      className: \"back-button-container\",\n      onClick: this.goToWork,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 23\n      }\n    }, __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 103\n      }\n    }, \"\\u2039\"))), __jsx(\"div\", {\n      className: \"project-title-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 21\n      }\n    }, __jsx(Title, {\n      text: this.state.project.name,\n      noMargin: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 23\n      }\n    }), this.state.project.url && __jsx(\"div\", {\n      className: \"view-project-anchor\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 27\n      }\n    }, __jsx(\"a\", {\n      href: this.state.project.url,\n      target: \"_blank\",\n      rel: \"noopener noreferrer\",\n      className: \"link\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 29\n      }\n    }, \"Voir le projet\")), __jsx(ScrollableRow, {\n      className: \"project-skills-container\",\n      step: 164 / 2.5,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 23\n      }\n    }, this.state.project.languages.map(SkillService.getFromName).map(skill => __jsx(Item, {\n      key: skill.name,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 29\n      }\n    }, __jsx(Link, {\n      to: \"/work?skill=\".concat(encodeURIComponent(skill.name)),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 31\n      }\n    }, __jsx(Skill, {\n      name: skill.name,\n      backgroundColor: skill.backgroundColor,\n      backgroundImage: skill.backgroundImage,\n      experience: skill.experience,\n      logo: skill.logo,\n      isLittle: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 33\n      }\n    }))))))), __jsx(\"div\", {\n      className: \"project-scroller-container bp-small\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 19\n      }\n    }, __jsx(RectScroller, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 21\n      }\n    }, this.state.project.images.map(image => __jsx(\"img\", {\n      src: \"/images-webp/project/\".concat(image),\n      key: image,\n      style: {\n        backgroundColor: this.state.project.backgroundColor\n      },\n      alt: this.state.project.name + ' ' + image,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 25\n      }\n    })))), __jsx(\"div\", {\n      className: \"project-description-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 19\n      }\n    }, tabs.map((tab, idx) => __jsx(\"button\", {\n      type: \"submit\",\n      key: tab.name,\n      className: this.state.activeSlide === idx ? \"isActive\" : undefined,\n      onClick: e => this.setActiveSlide(idx, e),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 46\n      }\n    }, tab.name))), __jsx(\"div\", {\n      className: \"project-description-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 19\n      }\n    }, __jsx(Slider, {\n      settings: {\n        dots: false,\n        arrows: false,\n        infine: false\n      },\n      ref: this.sliderRef,\n      onSwipe: this.onSwipe,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 21\n      }\n    }, tabs.map(tab => __jsx(Description, {\n      text: tab.content,\n      key: \"\".concat(tab.name, \"|content\"),\n      noMargin: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 42\n      }\n    }))))), __jsx(\"div\", {\n      className: \"project-scroller-container bp-large\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 17\n      }\n    }, __jsx(RectScroller, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 19\n      }\n    }, this.state.project.images.map(image => __jsx(Zoomable, {\n      key: image,\n      closeButton: this.getCloseButton(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 23\n      }\n    }, __jsx(\"img\", {\n      src: \"/images-webp/project/\".concat(image),\n      alt: this.state.project.name + ' ' + image,\n      style: {\n        backgroundColor: this.state.project.backgroundColor,\n        height: '100%',\n        width: '100%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 25\n      }\n    }))))), this.state.transitionVisible && __jsx(ProjectOverlay, {\n      out: true,\n      backgroundColor: this.state.project.backgroundColor,\n      logo: this.state.project.logo,\n      isVisible: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 19\n      }\n    })) : __jsx(Redirect, {\n      to: \"/work\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 15\n      }\n    })));\n  }\n\n}\n\nexport default _c = withRouter(ProjectPage);\n\nvar _c;\n\n$RefreshReg$(_c, \"%default%\");","map":{"version":3,"sources":["/mnt/c/Users/Mehdi/projects/perso/meddou.com/meddou.com/pages/Project.jsx"],"names":["React","withRouter","Link","Redirect","Slider","moment","BasicPage","Row","Item","Project","ProjectOverlay","Skill","ScrollableRow","Title","Description","RectScroller","SkillService","ProjectService","Zoomable","ProjectPage","constructor","props","name","match","params","timeoutId","undefined","sliderRef","createRef","container","window","state","transitionVisible","_projectListToProjectTrasition","project","getFromName","activeSlide","goToWork","bind","onSwipe","componentDidMount","setTimeout","setState","scroll","top","left","behavior","componentWillUnmount","clearTimeout","e","preventDefault","history","push","setActiveSlide","slide","current","slickGoTo","direction","getCloseButton","renderContent","tabs","test","description_project","content","description_mission","start","locale","format","end","filter","t","display","position","backgroundColor","backgroundImage","logo","url","languages","map","skill","encodeURIComponent","experience","images","image","tab","idx","dots","arrows","infine","height","width"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,EAAqBC,IAArB,EAA2BC,QAA3B,QAA2C,kBAA3C;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAO,kBAAP;AAEA,OAAOC,SAAP,MAAsB,aAAtB;AAEA,OAAOC,GAAP,MAAgB,mBAAhB;AACA,OAAOC,IAAP,MAAiB,qBAAjB;AAEA,OAAOC,OAAP,MAAoB,8BAApB;AACA,OAAOC,cAAP,MAA2B,qCAA3B;AACA,OAAOC,KAAP,MAAkB,0BAAlB;AACA,OAAOC,aAAP,MAA0B,2CAA1B;AACA,OAAOC,KAAP,MAAkB,0BAAlB;AACA,OAAOC,WAAP,MAAwB,sCAAxB;AACA,OAAOC,YAAP,MAAyB,yCAAzB;AAEA,OAAOC,YAAP,MAAyB,mBAAzB;AACA,OAAOC,cAAP,MAA2B,qBAA3B,C,CAEA;AACA;;AACA,OAAOC,QAAP,MAAqB,gCAArB;AAEA,OAAO,iBAAP;;AAGA,MAAMC,WAAN,SAA0Bb,SAA1B,CAAoC;AAClCc,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AAEA,UAAMC,IAAI,GAAGD,KAAK,CAACE,KAAN,CAAYC,MAAZ,CAAmBF,IAAhC;AAEA,SAAKG,SAAL,GAAiBC,SAAjB;AAEA,SAAKC,SAAL,GAAiB3B,KAAK,CAAC4B,SAAN,EAAjB;AAEA,SAAKC,SAAL,GAAiBC,MAAjB;AAEA,SAAKC,KAAL,GAAa;AACXC,MAAAA,iBAAiB,EAAE,CAAC,CAACF,MAAM,CAACG,8BADjB;AAEXC,MAAAA,OAAO,EAAEjB,cAAc,CAACkB,WAAf,CAA2Bb,IAA3B,CAFE;AAGXc,MAAAA,WAAW,EAAE;AAHF,KAAb;AAMA,SAAKC,QAAL,GAAgB,KAAKA,QAAL,CAAcC,IAAd,CAAmB,IAAnB,CAAhB;AACA,SAAKC,OAAL,GAAe,KAAKA,OAAL,CAAaD,IAAb,CAAkB,IAAlB,CAAf;AACD;;AAEDE,EAAAA,iBAAiB,GAAG;AAClB,SAAKf,SAAL,GAAiBgB,UAAU,CAAC,MAAM;AAChC,WAAKhB,SAAL,GAAiBC,SAAjB;AACA,WAAKgB,QAAL,CAAc;AACZV,QAAAA,iBAAiB,EAAE;AADP,OAAd;AAGD,KAL0B,EAKxB,GALwB,CAA3B,CADkB,CAQlB;;AACE,SAAKH,SAAL,CAAec,MAAf,CAAsB;AACpBC,MAAAA,GAAG,EAAE,CADe;AAEpBC,MAAAA,IAAI,EAAE,CAFc;AAGpBC,MAAAA,QAAQ,EAAE;AAHU,KAAtB,EATgB,CAclB;AACD;;AAEDC,EAAAA,oBAAoB,GAAG;AACrB,QAAI,KAAKtB,SAAT,EAAoB;AAClBuB,MAAAA,YAAY,CAAC,KAAKvB,SAAN,CAAZ;AACD,KAHoB,CAIrB;;;AACE,SAAKI,SAAL,CAAec,MAAf,CAAsB;AACpBC,MAAAA,GAAG,EAAE,CADe;AAEpBC,MAAAA,IAAI,EAAE,CAFc;AAGpBC,MAAAA,QAAQ,EAAE;AAHU,KAAtB,EALmB,CAUrB;;AACAhB,IAAAA,MAAM,CAACG,8BAAP,GAAwCP,SAAxC;AACD;;AAEDW,EAAAA,QAAQ,CAACY,CAAD,EAAI;AACVA,IAAAA,CAAC,CAACC,cAAF;AACA,SAAK7B,KAAL,CAAW8B,OAAX,CAAmBC,IAAnB;AACD;;AAEDC,EAAAA,cAAc,CAACC,KAAD,EAAQL,CAAR,EAAW;AACvBA,IAAAA,CAAC,CAACC,cAAF;;AACA,QAAI,KAAKnB,KAAL,CAAWK,WAAX,KAA2BkB,KAA/B,EAAsC;AACpC,WAAKZ,QAAL,CAAc;AAACN,QAAAA,WAAW,EAAEkB;AAAd,OAAd;AACA,WAAK3B,SAAL,CAAe4B,OAAf,CAAuBC,SAAvB,CAAiCF,KAAjC;AACD;AACF;;AAEDf,EAAAA,OAAO,CAACkB,SAAD,EAAY;AACjB,SAAKf,QAAL,CAAc;AAACN,MAAAA,WAAW,EAAEqB,SAAS,KAAK,MAAd,GAAuB,CAAvB,GAA2B;AAAzC,KAAd;AACD;;AAEDC,EAAAA,cAAc,GAAG;AACf,WACE;AAAK,MAAA,SAAS,EAAC,gCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WADF,CADF;AAKD;;AAEDC,EAAAA,aAAa,GAAG;AACd,UAAMC,IAAI,GAAG,CACX;AAACC,MAAAA,IAAI,EAAE,KAAK9B,KAAL,CAAWG,OAAX,CAAmB4B,mBAAnB,IAA0C,EAAjD;AAAqDxC,MAAAA,IAAI,EAAE,WAA3D;AAAwEyC,MAAAA,OAAO,EAAE,KAAKhC,KAAL,CAAWG,OAAX,CAAmB4B,mBAAnB,IAA0C;AAA3H,KADW,EAEX;AAACD,MAAAA,IAAI,EAAE,KAAK9B,KAAL,CAAWG,OAAX,CAAmB8B,mBAA1B;AAA+C1C,MAAAA,IAAI,EAAE,YAArD;AAAmEyC,MAAAA,OAAO,EAAE,KAAKhC,KAAL,CAAWG,OAAX,CAAmB8B;AAA/F,KAFW,EAGX;AAACH,MAAAA,IAAI,EAAE,KAAK9B,KAAL,CAAWG,OAAX,CAAmB+B,KAA1B;AAAiC3C,MAAAA,IAAI,EAAE,UAAvC;AAAmDyC,MAAAA,OAAO,EAAE1D,MAAM,CAAC,KAAK0B,KAAL,CAAWG,OAAX,CAAmB+B,KAApB,CAAN,CAAiCC,MAAjC,CAAwC,IAAxC,EAA8CC,MAA9C,CAAqD,IAArD,IAA6D,KAA7D,IAAsE,KAAKpC,KAAL,CAAWG,OAAX,CAAmBkC,GAAnB,GAAyB/D,MAAM,CAAC,KAAK0B,KAAL,CAAWG,OAAX,CAAmBkC,GAApB,CAAN,CAA+BF,MAA/B,CAAsC,IAAtC,EAA4CC,MAA5C,CAAmD,IAAnD,CAAzB,GAAoF,QAA1J;AAA5D,KAHW,EAIXE,MAJW,CAIJC,CAAC,IAAIA,CAAC,CAACT,IAJH,CAAb;AAMA,WACE;AAAK,MAAA,EAAE,EAAC,8BAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,yBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE;AAAK,MAAA,EAAE,EAAC,wBAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAK9B,KAAL,CAAWG,OAAX,GAEG;AAAK,MAAA,SAAS,EAAC,wBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,+BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,GAAD;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,KAAK,EAAE;AAACqC,QAAAA,OAAO,EAAE,cAAV;AAA0BC,QAAAA,QAAQ,EAAE;AAApC,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,OAAD;AACE,MAAA,eAAe,EAAE,KAAKzC,KAAL,CAAWG,OAAX,CAAmBuC,eADtC;AAEE,MAAA,eAAe,EAAE,KAAK1C,KAAL,CAAWG,OAAX,CAAmBwC,eAFtC;AAGE,MAAA,IAAI,EAAE,KAAK3C,KAAL,CAAWG,OAAX,CAAmBZ,IAH3B;AAIE,MAAA,IAAI,EAAE,KAAKS,KAAL,CAAWG,OAAX,CAAmByC,IAJ3B;AAKE,MAAA,WAAW,EAAE,KALf;AAME,MAAA,QAAQ,MANV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EASE;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAsB,MAAA,SAAS,EAAC,uBAAhC;AAAwD,MAAA,OAAO,EAAE,KAAKtC,QAAtE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAgF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAhF,CATF,CADF,EAYE;AAAK,MAAA,SAAS,EAAC,yBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,KAAD;AAAO,MAAA,IAAI,EAAE,KAAKN,KAAL,CAAWG,OAAX,CAAmBZ,IAAhC;AAAsC,MAAA,QAAQ,MAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEI,KAAKS,KAAL,CAAWG,OAAX,CAAmB0C,GAAnB,IAEE;AAAK,MAAA,SAAS,EAAC,qBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AACE,MAAA,IAAI,EAAE,KAAK7C,KAAL,CAAWG,OAAX,CAAmB0C,GAD3B;AAEE,MAAA,MAAM,EAAC,QAFT;AAGE,MAAA,GAAG,EAAC,qBAHN;AAIE,MAAA,SAAS,EAAC,MAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADF,CAJN,EAeE,MAAC,aAAD;AAAe,MAAA,SAAS,EAAC,0BAAzB;AAAoD,MAAA,IAAI,EAAE,MAAM,GAAhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,KAAK7C,KAAL,CAAWG,OAAX,CAAmB2C,SAAnB,CAA6BC,GAA7B,CAAiC9D,YAAY,CAACmB,WAA9C,EAA2D2C,GAA3D,CAA+DC,KAAK,IAElE,MAAC,IAAD;AAAM,MAAA,GAAG,EAAEA,KAAK,CAACzD,IAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,IAAD;AAAM,MAAA,EAAE,wBAAiB0D,kBAAkB,CAACD,KAAK,CAACzD,IAAP,CAAnC,CAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,KAAD;AACE,MAAA,IAAI,EAAEyD,KAAK,CAACzD,IADd;AAEE,MAAA,eAAe,EAAEyD,KAAK,CAACN,eAFzB;AAGE,MAAA,eAAe,EAAEM,KAAK,CAACL,eAHzB;AAIE,MAAA,UAAU,EAAEK,KAAK,CAACE,UAJpB;AAKE,MAAA,IAAI,EAAEF,KAAK,CAACJ,IALd;AAME,MAAA,QAAQ,MANV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF,CAFF,CADJ,CAfF,CAZF,CADF,EA+CE;AAAK,MAAA,SAAS,EAAC,qCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,KAAK5C,KAAL,CAAWG,OAAX,CAAmBgD,MAAnB,CAA0BJ,GAA1B,CAA8BK,KAAK,IACnC;AAAK,MAAA,GAAG,iCAA0BA,KAA1B,CAAR;AAA2C,MAAA,GAAG,EAAEA,KAAhD;AAAuD,MAAA,KAAK,EAAE;AAACV,QAAAA,eAAe,EAAE,KAAK1C,KAAL,CAAWG,OAAX,CAAmBuC;AAArC,OAA9D;AAAqH,MAAA,GAAG,EAAE,KAAK1C,KAAL,CAAWG,OAAX,CAAmBZ,IAAnB,GAA0B,GAA1B,GAAgC6D,KAA1J;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADA,CADJ,CADF,CA/CF,EAsDE;AAAK,MAAA,SAAS,EAAC,4BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEIvB,IAAI,CAACkB,GAAL,CAAS,CAACM,GAAD,EAAMC,GAAN,KAAc;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAsB,MAAA,GAAG,EAAED,GAAG,CAAC9D,IAA/B;AAAqC,MAAA,SAAS,EAAE,KAAKS,KAAL,CAAWK,WAAX,KAA2BiD,GAA3B,GAAiC,UAAjC,GAA8C3D,SAA9F;AAAyG,MAAA,OAAO,EAAGuB,CAAD,IAAO,KAAKI,cAAL,CAAoBgC,GAApB,EAAyBpC,CAAzB,CAAzH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAuJmC,GAAG,CAAC9D,IAA3J,CAAvB,CAFJ,CAtDF,EA2DE;AAAK,MAAA,SAAS,EAAC,6BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,MAAD;AAAQ,MAAA,QAAQ,EAAE;AAACgE,QAAAA,IAAI,EAAE,KAAP;AAAcC,QAAAA,MAAM,EAAE,KAAtB;AAA6BC,QAAAA,MAAM,EAAE;AAArC,OAAlB;AAA+D,MAAA,GAAG,EAAE,KAAK7D,SAAzE;AAAoF,MAAA,OAAO,EAAE,KAAKY,OAAlG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGqB,IAAI,CAACkB,GAAL,CAAUM,GAAD,IAAS,MAAC,WAAD;AAAa,MAAA,IAAI,EAAEA,GAAG,CAACrB,OAAvB;AAAgC,MAAA,GAAG,YAAKqB,GAAG,CAAC9D,IAAT,aAAnC;AAA4D,MAAA,QAAQ,MAApE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAlB,CADH,CADF,CA3DF,CADF,EAkEE;AAAK,MAAA,SAAS,EAAC,qCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,KAAKS,KAAL,CAAWG,OAAX,CAAmBgD,MAAnB,CAA0BJ,GAA1B,CAA8BK,KAAK,IACnC,MAAC,QAAD;AAAU,MAAA,GAAG,EAAEA,KAAf;AAAsB,MAAA,WAAW,EAAE,KAAKzB,cAAL,EAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,GAAG,iCAA0ByB,KAA1B,CAAR;AAA2C,MAAA,GAAG,EAAE,KAAKpD,KAAL,CAAWG,OAAX,CAAmBZ,IAAnB,GAA0B,GAA1B,GAAgC6D,KAAhF;AAAuF,MAAA,KAAK,EAAE;AAACV,QAAAA,eAAe,EAAE,KAAK1C,KAAL,CAAWG,OAAX,CAAmBuC,eAArC;AAAsDgB,QAAAA,MAAM,EAAE,MAA9D;AAAsEC,QAAAA,KAAK,EAAE;AAA7E,OAA9F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADA,CADJ,CADF,CAlEF,EA2EI,KAAK3D,KAAL,CAAWC,iBAAX,IACA,MAAC,cAAD;AAAgB,MAAA,GAAG,MAAnB;AAAoB,MAAA,eAAe,EAAE,KAAKD,KAAL,CAAWG,OAAX,CAAmBuC,eAAxD;AAAyE,MAAA,IAAI,EAAE,KAAK1C,KAAL,CAAWG,OAAX,CAAmByC,IAAlG;AAAwG,MAAA,SAAS,MAAjH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA5EJ,CAFH,GAiFG,MAAC,QAAD;AAAU,MAAA,EAAE,EAAC,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAlFN,CAFF,CADF;AAyFD;;AA9KiC;;AAiLpC,oBAAe1E,UAAU,CAACkB,WAAD,CAAzB","sourcesContent":["import React from 'react'\r\nimport { withRouter, Link, Redirect } from 'react-router-dom'\r\nimport Slider from 'react-slick'\r\nimport moment from 'moment'\r\nimport 'moment/locale/fr';\r\n\r\nimport BasicPage from './BasicPage'\r\n\r\nimport Row from '../layout/row/Row'\r\nimport Item from '../layout/item/Item'\r\n\r\nimport Project from '../component/project/Project'\r\nimport ProjectOverlay from '../component/project/ProjectOverlay'\r\nimport Skill from '../component/skill/Skill'\r\nimport ScrollableRow from '../component/scrollable-row/ScrollableRow'\r\nimport Title from '../component/title/Title'\r\nimport Description from '../component/description/Description'\r\nimport RectScroller from '../component/rect-scroller/RectScroller'\r\n\r\nimport SkillService from '../services/Skill'\r\nimport ProjectService from '../services/Project'\r\n\r\n// import './Project.css'\r\n// import './BasicPage.css'\r\nimport Zoomable from '../component/zoomable/Zoomable'\r\n\r\nimport './slick.min.css'\r\n\r\n\r\nclass ProjectPage extends BasicPage {\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    const name = props.match.params.name\r\n\r\n    this.timeoutId = undefined\r\n\r\n    this.sliderRef = React.createRef()\r\n\r\n    this.container = window\r\n\r\n    this.state = {\r\n      transitionVisible: !!window._projectListToProjectTrasition,\r\n      project: ProjectService.getFromName(name),\r\n      activeSlide: 0\r\n    }\r\n\r\n    this.goToWork = this.goToWork.bind(this)\r\n    this.onSwipe = this.onSwipe.bind(this)\r\n  }\r\n\r\n  componentDidMount() {    \r\n    this.timeoutId = setTimeout(() => {\r\n      this.timeoutId = undefined\r\n      this.setState({\r\n        transitionVisible: false\r\n      })\r\n    }, 500)\r\n\r\n    // if (!window.document.documentMode) {\r\n      this.container.scroll({\r\n        top: 0,\r\n        left: 0,\r\n        behavior: 'instant'\r\n      })\r\n    // }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    if (this.timeoutId) {\r\n      clearTimeout(this.timeoutId)\r\n    }\r\n    // if (!window.document.documentMode) {\r\n      this.container.scroll({\r\n        top: 0,\r\n        left: 0,\r\n        behavior: 'instant'\r\n      })\r\n    // }\r\n    window._projectListToProjectTrasition = undefined\r\n  }\r\n\r\n  goToWork(e) {\r\n    e.preventDefault()\r\n    this.props.history.push(`/work`)\r\n  }\r\n\r\n  setActiveSlide(slide, e) {\r\n    e.preventDefault()\r\n    if (this.state.activeSlide !== slide) {\r\n      this.setState({activeSlide: slide})\r\n      this.sliderRef.current.slickGoTo(slide)\r\n    }\r\n  }\r\n\r\n  onSwipe(direction) {\r\n    this.setState({activeSlide: direction === 'left' ? 1 : 0})\r\n  }\r\n\r\n  getCloseButton() {\r\n    return (\r\n      <div className=\"project-close-button-container\">\r\n        <div>x</div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  renderContent() {\r\n    const tabs = [\r\n      {test: this.state.project.description_project || '', name: 'Le projet', content: this.state.project.description_project || ''},\r\n      {test: this.state.project.description_mission, name: 'La mission', content: this.state.project.description_mission},\r\n      {test: this.state.project.start, name: 'La durÃ©e', content: moment(this.state.project.start).locale('fr').format('LL') + ' - ' + (this.state.project.end ? moment(this.state.project.end).locale('fr').format('LL') : 'Actuel')}\r\n    ].filter(t => t.test)\r\n\r\n    return (\r\n      <div id=\"project-page-super-container\">\r\n        <div className=\"project-page-background\" />\r\n        <div id=\"project-page-container\">\r\n          {this.state.project ?\r\n            (\r\n              <div className=\"project-info-container\">\r\n                <div className=\"project-description-container\">\r\n                  <Row className=\"project-header\">\r\n                    <div style={{display: 'inline-block', position: 'relative'}}>\r\n                      <Project\r\n                        backgroundColor={this.state.project.backgroundColor}\r\n                        backgroundImage={this.state.project.backgroundImage}\r\n                        name={this.state.project.name}\r\n                        logo={this.state.project.logo}\r\n                        isHoverable={false}\r\n                        fullSize\r\n                      />\r\n                      <button type=\"submit\" className=\"back-button-container\" onClick={this.goToWork}><div>&#8249;</div></button>\r\n                    </div>\r\n                    <div className=\"project-title-container\">\r\n                      <Title text={this.state.project.name} noMargin />\r\n                      { this.state.project.url &&\r\n                        (\r\n                          <div className=\"view-project-anchor\">\r\n                            <a\r\n                              href={this.state.project.url}\r\n                              target=\"_blank\"\r\n                              rel=\"noopener noreferrer\"\r\n                              className=\"link\"\r\n                            >\r\n                              Voir le projet\r\n                            </a>\r\n                          </div>\r\n                        )}\r\n                      <ScrollableRow className=\"project-skills-container\" step={164 / 2.5}>\r\n                        { this.state.project.languages.map(SkillService.getFromName).map(skill =>\r\n                          (\r\n                            <Item key={skill.name}>\r\n                              <Link to={`/work?skill=${encodeURIComponent(skill.name)}`}>\r\n                                <Skill\r\n                                  name={skill.name}\r\n                                  backgroundColor={skill.backgroundColor}\r\n                                  backgroundImage={skill.backgroundImage}\r\n                                  experience={skill.experience}\r\n                                  logo={skill.logo}\r\n                                  isLittle\r\n                                />\r\n                              </Link>\r\n                            </Item>\r\n                          ))}\r\n                      </ScrollableRow>\r\n                    </div>\r\n                  </Row>\r\n                  <div className=\"project-scroller-container bp-small\">\r\n                    <RectScroller>\r\n                      { this.state.project.images.map(image => (\r\n                        <img src={`/images-webp/project/${image}`} key={image} style={{backgroundColor: this.state.project.backgroundColor}} alt={this.state.project.name + ' ' + image} />\r\n                      ))}\r\n                    </RectScroller>\r\n                  </div>\r\n                  <div className=\"project-description-header\">\r\n                    {\r\n                      tabs.map((tab, idx) => <button type=\"submit\" key={tab.name} className={this.state.activeSlide === idx ? \"isActive\" : undefined} onClick={(e) => this.setActiveSlide(idx, e)}>{tab.name}</button>)\r\n                    }\r\n                  </div>\r\n                  <div className=\"project-description-content\">\r\n                    <Slider settings={{dots: false, arrows: false, infine: false}} ref={this.sliderRef} onSwipe={this.onSwipe}>\r\n                      {tabs.map((tab) => <Description text={tab.content} key={`${tab.name}|content`} noMargin />)}\r\n                    </Slider>\r\n                  </div>\r\n                </div>\r\n                <div className=\"project-scroller-container bp-large\">\r\n                  <RectScroller>\r\n                    { this.state.project.images.map(image => (\r\n                      <Zoomable key={image} closeButton={this.getCloseButton()}>\r\n                        <img src={`/images-webp/project/${image}`} alt={this.state.project.name + ' ' + image} style={{backgroundColor: this.state.project.backgroundColor, height: '100%', width: '100%'}} />\r\n                      </Zoomable>\r\n                    )) }\r\n                  </RectScroller>\r\n                </div>\r\n                { this.state.transitionVisible &&\r\n                  <ProjectOverlay out backgroundColor={this.state.project.backgroundColor} logo={this.state.project.logo} isVisible /> }\r\n              </div>\r\n              ) :\r\n              <Redirect to='/work' /> }\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default withRouter(ProjectPage)\r\n"]},"metadata":{},"sourceType":"module"}