{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Users/Mehdi/projects/perso/meddou.com/meddou.com/component/Scroller.jsx\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass Scroller extends Component {\n  constructor(props) {\n    super(props);\n    this.containerRef = React.createRef();\n    this.sectionRefs = [];\n    this.lastScrollTop = 0;\n    this.isScrolling = false;\n    this.canScroll = true;\n    this.scrollTimeout = undefined;\n    this.scrollTimer = undefined;\n    this.canScrollTimeout = undefined;\n    this.sections = React.Children.map(props.children, child => {\n      var ref = React.createRef();\n      this.sectionRefs.push(ref);\n      return __jsx(\"div\", {\n        ref: ref,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 14\n        }\n      }, child);\n    });\n    this.index = props.index || 0;\n    this.nextIndex = props.index || 0;\n    this.scrollTimerFx = this.scrollTimerFx.bind(this);\n  }\n\n  componentDidMount() {\n    this.container = this.props.container || this.containerRef.current || document.querySelector('html');\n    this.isScrolling = true;\n    this.scrollToElement(this.sectionRefs[this.index].current, this.index, false);\n    this.bindListener();\n  }\n\n  componentDidUpdate() {\n    const index = this.props.index;\n\n    if (this.nextIndex !== index) {\n      this.index = index;\n      this.isScrolling = true;\n      this.scrollToElement(this.sectionRefs[this.index].current, index);\n    }\n  }\n\n  componentWillUnmount() {\n    this.unbindListener();\n    window.clearTimeout(this.scrollTimeout);\n    window.clearTimeout(this.canScrollTimeout);\n  }\n\n  onScroll(e) {\n    var scrollDirectionCoeff = this.getScrollDirection() === true ? 1 : -1;\n\n    if (this.index + scrollDirectionCoeff < this.sectionRefs.length && this.index + scrollDirectionCoeff >= 0 && e.timeStamp >= 1000) {\n      var nextIndex = this.index + scrollDirectionCoeff; // var currentElement = this.sectionRefs[this.index].current.getBoundingClientRect()\n\n      var nextElement = this.sectionRefs[nextIndex].current.getBoundingClientRect();\n\n      if (scrollDirectionCoeff === 1 || scrollDirectionCoeff === -1 && nextElement.top + nextElement.height + 1 >= 0) {\n        e.preventDefault();\n        e.stopPropagation();\n        this.nextIndex = nextIndex;\n        this.notifyOnScroll(nextIndex);\n        this.scrollToElement(this.sectionRefs[nextIndex].current, nextIndex);\n      }\n      /* else {\r\n        this.isScrolling = false\r\n      }*/\n\n    }\n  }\n\n  getContainerBounding() {\n    return this.container.getBoundingClientRect();\n  }\n\n  getContainerScrollTop() {\n    return this.container.scrollTop || window.pageYOffset || document.documentElement.scrollTop;\n  }\n\n  getScrollDirection() {\n    var st = this.getContainerScrollTop();\n    var ret = st > this.lastScrollTop;\n    this.lastScrollTop = st <= 0 ? 0 : st;\n    return ret;\n  }\n\n  scrollToElement(element, index, isSmooth = true) {\n    const top = this.getContainerScrollTop();\n    const elementRect = element.getBoundingClientRect(); // this.isScrolling = true\n\n    this.container.scrollTo({\n      behavior: isSmooth ? 'smooth' : 'instant',\n      left: 0,\n      top: top + elementRect.top\n    });\n    this.index = index;\n    this.nextIndex = index;\n  }\n\n  notifyOnScroll(index) {\n    const onScroll = this.props.onScroll;\n    onScroll && onScroll(index);\n  }\n\n  scrollTimerFx(e) {\n    if (this.canScroll) {\n      /**\r\n       * @LINK https://stackoverflow.com/questions/4620906/how-do-i-know-when-ive-stopped-scrolling\r\n       */\n      if (this.scrollTimer !== null) {\n        clearTimeout(this.scrollTimer);\n      }\n\n      this.scrollTimer = setTimeout(() => {\n        if (this.isScrolling) {\n          this.canScroll = false;\n          this.getScrollDirection();\n          this.isScrolling = false;\n          this.canScrollTimeout = window.setTimeout(() => this.canScroll = true, 500);\n        } else {\n          this.isScrolling = true;\n          this.onScroll(e);\n        }\n      }, 150);\n    } else {\n      this.getScrollDirection();\n    }\n  }\n\n  bindListener() {\n    this.container.addEventListener('scroll', this.scrollTimerFx);\n  }\n\n  unbindListener() {\n    this.container.removeEventListener('scroll', this.scrollTimerFx);\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      ref: this.containerRef,\n      className: [\"scroller-main-container\", this.props.className || ''].join(' '),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 7\n      }\n    }, this.sections.map(child => child));\n  }\n\n}\n\nScroller.propTypes = {\n  index: PropTypes.number.isRequired,\n  children: PropTypes.arrayOf(PropTypes.node.isRequired).isRequired,\n  onScroll: PropTypes.func.isRequired\n};\nexport default Scroller;","map":{"version":3,"sources":["/mnt/c/Users/Mehdi/projects/perso/meddou.com/meddou.com/component/Scroller.jsx"],"names":["React","Component","PropTypes","Scroller","constructor","props","containerRef","createRef","sectionRefs","lastScrollTop","isScrolling","canScroll","scrollTimeout","undefined","scrollTimer","canScrollTimeout","sections","Children","map","children","child","ref","push","index","nextIndex","scrollTimerFx","bind","componentDidMount","container","current","document","querySelector","scrollToElement","bindListener","componentDidUpdate","componentWillUnmount","unbindListener","window","clearTimeout","onScroll","e","scrollDirectionCoeff","getScrollDirection","length","timeStamp","nextElement","getBoundingClientRect","top","height","preventDefault","stopPropagation","notifyOnScroll","getContainerBounding","getContainerScrollTop","scrollTop","pageYOffset","documentElement","st","ret","element","isSmooth","elementRect","scrollTo","behavior","left","setTimeout","addEventListener","removeEventListener","render","className","join","propTypes","number","isRequired","arrayOf","node","func"],"mappings":"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","sourcesContent":["import React, {Component} from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nclass Scroller extends Component {\r\n\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.containerRef = React.createRef()\r\n    this.sectionRefs = []\r\n    this.lastScrollTop = 0\r\n    this.isScrolling = false\r\n    this.canScroll = true\r\n  \r\n    this.scrollTimeout = undefined\r\n    this.scrollTimer = undefined\r\n    this.canScrollTimeout = undefined\r\n\r\n    this.sections = React.Children.map(props.children, child => {\r\n      var ref = React.createRef()\r\n\r\n      this.sectionRefs.push(ref)\r\n      return <div ref={ref}>{child}</div>\r\n    })\r\n\r\n    this.index = props.index || 0\r\n\r\n    this.nextIndex = props.index || 0\r\n\r\n    this.scrollTimerFx = this.scrollTimerFx.bind(this)\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.container = this.props.container || this.containerRef.current || document.querySelector('html')\r\n\r\n    this.isScrolling = true\r\n    this.scrollToElement(this.sectionRefs[this.index].current, this.index, false)\r\n    this.bindListener()\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    const {index} = this.props\r\n\r\n    if (this.nextIndex !== index) {\r\n      this.index = index\r\n      this.isScrolling = true\r\n      this.scrollToElement(this.sectionRefs[this.index].current, index)\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.unbindListener()\r\n    window.clearTimeout(this.scrollTimeout)\r\n    window.clearTimeout(this.canScrollTimeout)\r\n  }\r\n\r\n  onScroll(e) {\r\n    var scrollDirectionCoeff = this.getScrollDirection() === true ?  1 : -1\r\n\r\n    if ((this.index + scrollDirectionCoeff) < this.sectionRefs.length && (this.index + scrollDirectionCoeff) >= 0 && e.timeStamp >= 1000) {\r\n      var nextIndex = this.index + scrollDirectionCoeff\r\n\r\n      // var currentElement = this.sectionRefs[this.index].current.getBoundingClientRect()\r\n      var nextElement = this.sectionRefs[nextIndex].current.getBoundingClientRect()\r\n\r\n      if ((scrollDirectionCoeff === 1) ||\r\n      (scrollDirectionCoeff === -1 && nextElement.top + nextElement.height + 1 >= 0)) {\r\n        e.preventDefault()\r\n        e.stopPropagation()\r\n        this.nextIndex = nextIndex\r\n        this.notifyOnScroll(nextIndex)\r\n        this.scrollToElement(this.sectionRefs[nextIndex].current, nextIndex)\r\n      }/* else {\r\n         this.isScrolling = false\r\n      }*/\r\n    }\r\n  }\r\n\r\n  getContainerBounding() {\r\n    return this.container.getBoundingClientRect()\r\n  }\r\n\r\n  getContainerScrollTop() {\r\n    return this.container.scrollTop || window.pageYOffset || document.documentElement.scrollTop\r\n  }\r\n\r\n  getScrollDirection() {\r\n    var st = this.getContainerScrollTop()\r\n    var ret = st > this.lastScrollTop\r\n\r\n    this.lastScrollTop = st <= 0 ? 0 : st\r\n    return ret\r\n  }\r\n\r\n  scrollToElement(element, index, isSmooth = true) {\r\n    const top = this.getContainerScrollTop()\r\n    const elementRect = element.getBoundingClientRect()\r\n\r\n    // this.isScrolling = true\r\n    this.container.scrollTo({\r\n      behavior: isSmooth ? 'smooth' : 'instant',\r\n      left: 0,\r\n      top: top + elementRect.top\r\n    })\r\n\r\n    this.index = index\r\n    this.nextIndex = index\r\n  }\r\n\r\n  notifyOnScroll(index) {\r\n    const {onScroll} = this.props\r\n\r\n    onScroll && onScroll(index)\r\n  }\r\n\r\n  scrollTimerFx(e) {\r\n    if (this.canScroll) {\r\n      /**\r\n       * @LINK https://stackoverflow.com/questions/4620906/how-do-i-know-when-ive-stopped-scrolling\r\n       */\r\n      if (this.scrollTimer !== null) {\r\n        clearTimeout(this.scrollTimer);        \r\n      }\r\n      this.scrollTimer = setTimeout(() => {\r\n        if (this.isScrolling) {\r\n          this.canScroll = false\r\n          this.getScrollDirection()\r\n          this.isScrolling = false\r\n          this.canScrollTimeout = window.setTimeout(() => this.canScroll = true, 500)\r\n        } else {\r\n          this.isScrolling = true\r\n          this.onScroll(e)\r\n        }\r\n      }, 150);\r\n    } else {\r\n      this.getScrollDirection()\r\n    }\r\n  }\r\n\r\n  bindListener() {\r\n    this.container.addEventListener('scroll', this.scrollTimerFx)\r\n  }\r\n\r\n  unbindListener() {\r\n    this.container.removeEventListener('scroll', this.scrollTimerFx)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div ref={this.containerRef} className={[\"scroller-main-container\", this.props.className || ''].join(' ')}>\r\n        { this.sections.map(child => child) }\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nScroller.propTypes = {\r\n  index: PropTypes.number.isRequired,\r\n  children: PropTypes.arrayOf(PropTypes.node.isRequired).isRequired,\r\n  onScroll: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Scroller\r\n"]},"metadata":{},"sourceType":"module"}